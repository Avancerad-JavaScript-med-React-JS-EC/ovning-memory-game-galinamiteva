{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Aleksandra Miteva\\\\Desktop\\\\ovning-memory-game-galinamiteva\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/Board';\nimport Navbar from './components/Navbar';\nimport initializeDesk from './desk';\nexport default function App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [score, setScore] = useState(0);\n  const [wins, setWins] = useState(0);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const [losses, setLosses] = useState(0);\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDesk());\n  }, []);\n  useEffect(() => {\n    preloadImages();\n  }, cards);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n  useEffect(() => {\n    checkScore();\n  }, [score]);\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return 'click another square';\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n        updateScore(score, checkScore);\n      } else {\n        noMatch();\n      }\n    }\n  };\n\n  const noMatch = () => {\n    updateGuesses(wrongGuesses, checkGuesses);\n    setTimeout(resetCards, 1500);\n  };\n\n  function updateScore(score, callback) {\n    var newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  }\n\n  function updateGuesses(wrongGuesses, callback) {\n    var newGuesses = wrongGuesses + 1;\n    setWrongGuesses(wrongGuesses + 1);\n    callback(newGuesses);\n  }\n\n  const checkScore = score => {\n    if (score > 7) {\n      setWins(wins + 1);\n      setTimeout(newGame, 1500);\n    }\n  };\n\n  const checkGuesses = wrongGuesses => {\n    if (wrongGuesses > 7) {\n      setLosses(losses + 1);\n      setTimeout(newGame, 2000);\n    }\n  };\n\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDesk());\n    setWrongGuesses(0);\n    setScore(0);\n  };\n\n  const preloadImages = () => {\n    cards.map(card => {\n      const src = `/image/${card.type}.png`;\n      new Image().spc = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      wins: wins,\n      losses: losses,\n      score: score,\n      wrongGuesses: wrongGuesses,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      dimension: dimension,\n      cards: cards,\n      flipped: flipped,\n      handleClick: handleClick,\n      disabled: disabled,\n      solved: solved\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"UlVjV/PSOX7RAVf3fXJmjpZjEe8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/App.js"],"names":["React","useState","useEffect","Board","Navbar","initializeDesk","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","score","setScore","wins","setWins","wrongGuesses","setWrongGuesses","losses","setLosses","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","checkScore","handleClick","id","length","sameCardClicked","isMatch","resetCards","updateScore","noMatch","updateGuesses","checkGuesses","setTimeout","callback","newScore","newGuesses","newGame","map","card","src","type","Image","spc","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","textAlign"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport Board from './components/Board';\r\nimport Navbar from './components/Navbar'\r\nimport initializeDesk from './desk';\r\n\r\n\r\n\r\nexport default function App() {\r\n    const [cards, setCards] = useState([]);\r\n    const [flipped, setFlipped] = useState([]);\r\n    const [dimension, setDimension]=useState(400);\r\n    const [solved, setSolved] = useState([]);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [wins, setWins] = useState(0);\r\n    const [wrongGuesses, setWrongGuesses] = useState(0);\r\n    const [losses, setLosses] = useState(0);\r\n\r\n\r\n    useEffect(()=>{\r\n        resizeBoard()\r\n        setCards(initializeDesk())        \r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n        preloadImages()\r\n    }, cards)\r\n\r\n    useEffect(()=>{\r\n        const resizeListener = window.addEventListener('resize', resizeBoard)\r\n        return () => window.removeEventListener('resize', resizeListener)\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        checkScore();\r\n    }, [score]); \r\n\r\n   \r\n\r\n    const handleClick = (id) => {\r\n        setDisabled(true); \r\n        if(flipped.length === 0) {\r\n            setFlipped([id]);\r\n            setDisabled(false);\r\n                   \r\n        } else {\r\n            if (sameCardClicked (id)) return 'click another square';\r\n            setFlipped([flipped[0], id])\r\n            if (isMatch(id)) {\r\n                setSolved([...solved, flipped[0], id])\r\n                resetCards()\r\n                updateScore(score, checkScore);\r\n            } else {\r\n                noMatch();\r\n            }\r\n        }\r\n    };\r\n        \r\n   const noMatch = () => {\r\n       updateGuesses(wrongGuesses, checkGuesses);\r\n       setTimeout(resetCards, 1500);\r\n   }\r\n\r\n   function updateScore(score, callback) {\r\n       var newScore = score +1;\r\n       setScore(score + 1);\r\n       callback(newScore);\r\n   }\r\n\r\n   function updateGuesses(wrongGuesses, callback){\r\n       var newGuesses = wrongGuesses + 1;\r\n       setWrongGuesses(wrongGuesses + 1);\r\n       callback(newGuesses);\r\n   }\r\n\r\n   const checkScore = (score) =>{\r\n       if (score > 7) {\r\n           setWins(wins + 1);\r\n           setTimeout(newGame, 1500);\r\n       }\r\n   }\r\n \r\n   const checkGuesses = (wrongGuesses) => {\r\n       if (wrongGuesses>7){\r\n           setLosses (losses + 1);\r\n           setTimeout (newGame, 2000);\r\n       }\r\n   }\r\n\r\n   const newGame = () => {\r\n       setSolved([]);\r\n       setCards(initializeDesk());\r\n       setWrongGuesses(0);\r\n       setScore(0);\r\n    }\r\n\r\n    const preloadImages = () => {\r\n        cards.map( card =>{\r\n            const src = `/image/${card.type}.png`\r\n            new Image().spc = src\r\n        } )\r\n    }\r\n\r\n    const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled (false)\r\n    }\r\n\r\n    const sameCardClicked =(id) => flipped.includes(id);\r\n\r\n    const isMatch = (id) => {\r\n        const clickedCard = cards.find((card) => card.id === id);\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id);\r\n        return flippedCard.type === clickedCard.type;\r\n    };\r\n   \r\n\r\n    const resizeBoard = () => {\r\n        setDimension(Math.min(\r\n                document.documentElement.clientWidth,\r\n                document.documentElement.clientHeight\r\n            )\r\n        )\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <div className='app'  style = {{textAlign: 'center'}}>\r\n\r\n            <Navbar\r\n                wins = {wins}\r\n                losses = {losses}\r\n                score = {score}\r\n                wrongGuesses = {wrongGuesses}\r\n                newGame={newGame}/>\r\n\r\n            <Board \r\n            dimension={dimension}\r\n            cards={cards} \r\n            flipped={flipped}\r\n            handleClick={handleClick}\r\n            disabled={disabled}\r\n            solved={solved}/> \r\n\r\n                    \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}