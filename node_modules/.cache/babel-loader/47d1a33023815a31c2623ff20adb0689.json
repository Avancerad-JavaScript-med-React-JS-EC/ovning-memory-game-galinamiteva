{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import Card from'Card';// Här props är options, setOptions, highScore, setHighScore\nfunction MemoryCard(options,setOptions,highScore,setHighScore){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),game=_useState2[0],setGame=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),flippedCount=_useState4[0],setFlippedCount=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),flippedIndexes=_useState6[0],setFlippedIndexes=_useState6[1];var colors=['#ecdb54','#e34132','#6ca0dc','#944743','#dbb2d1','#ec9787','#00a68c','#645394','#6c4f3d','#ebe1df','#bc6ca7','#bfd833'];useEffect(function(){var newGame=[];for(var i=0;i<options/2;i++){var firstOption={id:2*i,colorId:i,color:colors[i],flipped:false};var secondOption={id:2*i+1,colorId:i,color:colors[i],flipped:false};newGame.push(firstOption);newGame.push(secondOption);}var shuffledGame=newGame.sort(function(){return Math.random()-0.5;});// det här är en speciell sätt att sortera \nsetGame(shuffledGame);},[]);useEffect(function(){var finished=!game.some(function(card){return!card.flipped;});if(finished&&game.length>0){setTimeout(function(){var bestPossible=game.length;var multiplier;if(options===12){multiplier=5;}else if(options===18){multiplier=2.5;}else if(options===24){multiplier=1;}var pointsLost=multiplier*(0.66*flippedCount-bestPossible);var score;if(pointsLost<100){score=100-pointsLost;}else{score=0;}if(score>highScore){setHighScore(score);var json=JSON.stringify(score);localStorage.setItem('memorygamehighscore',json);}var newGame=confirm('You Win!, SCORE: '+score+' New Game?');if(newGame){var gameLength=game.length;setOptions(null);setTimeout(function(){setOptions(gameLength);},5);}else{setOptions(null);}},500);}},[game]);if(flippedIndexes.length===2){var match=game[flippedIndexes[0]].colorId===game[flippedIndexes[1]].colorId;if(match){var newGame=_toConsumableArray(game);newGame[flippedIndexes[0]].flipped=true;newGame[flippedIndexes[1]].flipped=true;setGame(newGame);var newIndexes=_toConsumableArray(flippedIndexes);newIndexes.push(false);setFlippedIndexes(newIndexes);}else{var _newIndexes=_toConsumableArray(flippedIndexes);_newIndexes.push(true);setFlippedIndexes(_newIndexes);}}if(game.length===0)return/*#__PURE__*/_jsx(\"div\",{children:\"loading...\"});else{return/*#__PURE__*/_jsx(\"div\",{id:\"cards\",children:game.map(function(card,index){return/*#__PURE__*/_jsx(\"div\",{className:\"card\",children:/*#__PURE__*/_jsx(Card,{id:index,color:card.color,game:game,flippedCount:flippedCount,setFlippedCount:setFlippedCount,flippedIndexes:flippedIndexes,setFlippedIndexes:setFlippedIndexes})},index);})});}}export default MemoryCard;","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/components/MemoryCame.js"],"names":["React","Card","MemoryCard","options","setOptions","highScore","setHighScore","useState","game","setGame","flippedCount","setFlippedCount","flippedIndexes","setFlippedIndexes","colors","useEffect","newGame","i","firstOption","id","colorId","color","flipped","secondOption","push","shuffledGame","sort","Math","random","finished","some","card","length","setTimeout","bestPossible","multiplier","pointsLost","score","json","JSON","stringify","localStorage","setItem","confirm","gameLength","match","newIndexes","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Card from 'Card'\r\n\r\n// Här props är options, setOptions, highScore, setHighScore\r\n\r\nfunction MemoryCard(options, setOptions, highScore, setHighScore) {\r\n    const [game, setGame] = useState([]);\r\n    const [flippedCount, setFlippedCount] = useState(0);\r\n    const[flippedIndexes, setFlippedIndexes] = useState([]); \r\n    \r\n    const colors = [\r\n        '#ecdb54',\r\n        '#e34132',\r\n        '#6ca0dc',\r\n        '#944743',\r\n        '#dbb2d1',\r\n        '#ec9787',\r\n        '#00a68c',\r\n        '#645394',\r\n        '#6c4f3d',\r\n        '#ebe1df',\r\n        '#bc6ca7',\r\n        '#bfd833',\r\n      ]\r\n\r\n      useEffect(() => {\r\n        const newGame = []\r\n        for (let i = 0; i < options / 2; i++) {\r\n          const firstOption = {\r\n            id: 2 * i,\r\n            colorId: i,\r\n            color: colors[i],\r\n            flipped: false,\r\n          }\r\n          const secondOption = {\r\n            id: 2 * i + 1,\r\n            colorId: i,\r\n            color: colors[i],\r\n            flipped: false,\r\n          }\r\n    \r\n          newGame.push(firstOption)\r\n          newGame.push(secondOption)\r\n        }\r\n        const shuffledGame = newGame.sort(() => Math.random() - 0.5)  // det här är en speciell sätt att sortera \r\n        setGame(shuffledGame)\r\n      }, [])\r\n    \r\n      \r\n  \r\n      useEffect(() => {\r\n        const finished = !game.some(card => !card.flipped)\r\n        if (finished && game.length > 0) {\r\n          setTimeout(() => {\r\n            const bestPossible = game.length\r\n            let multiplier\r\n      \r\n            if (options === 12) {\r\n              multiplier = 5\r\n            } else if (options === 18) {\r\n              multiplier = 2.5\r\n            } else if (options === 24) {\r\n              multiplier = 1\r\n            }\r\n      \r\n            const pointsLost = multiplier * (0.66 * flippedCount - bestPossible)\r\n      \r\n            let score\r\n            if (pointsLost < 100) {\r\n              score = 100 - pointsLost\r\n            } else {\r\n              score = 0\r\n            }\r\n      \r\n            if (score > highScore) {\r\n              setHighScore(score)\r\n              const json = JSON.stringify(score)\r\n              localStorage.setItem('memorygamehighscore', json)\r\n            }\r\n      \r\n            const newGame = confirm('You Win!, SCORE: ' + score + ' New Game?')\r\n            if (newGame) {\r\n              const gameLength = game.length\r\n              setOptions(null)\r\n              setTimeout(() => {\r\n                setOptions(gameLength)\r\n              }, 5)\r\n            } else {\r\n              setOptions(null)\r\n            }\r\n          }, 500)\r\n        }\r\n      }, [game])\r\n  \r\n    if (flippedIndexes.length === 2) {\r\n        const match = game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId\r\n\r\n        if (match) {\r\n          const newGame = [...game]\r\n          newGame[flippedIndexes[0]].flipped = true\r\n          newGame[flippedIndexes[1]].flipped = true\r\n          setGame(newGame)\r\n      \r\n          const newIndexes = [...flippedIndexes]\r\n          newIndexes.push(false)\r\n          setFlippedIndexes(newIndexes)\r\n        } else {\r\n          const newIndexes = [...flippedIndexes]\r\n          newIndexes.push(true)\r\n          setFlippedIndexes(newIndexes)\r\n        }\r\n    }\r\n  \r\n    if (game.length === 0) return <div>loading...</div>\r\n    else {\r\n      return (\r\n        <div id=\"cards\">\r\n          {game.map((card, index) => (\r\n            <div className=\"card\" key={index}>\r\n              <Card\r\n                id={index}\r\n                color={card.color}\r\n                game={game}\r\n                flippedCount={flippedCount}\r\n                setFlippedCount={setFlippedCount}\r\n                flippedIndexes={flippedIndexes}\r\n                setFlippedIndexes={setFlippedIndexes}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    }\r\n  \r\n  \r\n}\r\n\r\nexport default MemoryCard;"]},"metadata":{},"sourceType":"module"}