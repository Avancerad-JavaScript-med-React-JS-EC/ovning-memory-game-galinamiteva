{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Board from'./components/Board';import Navbar from'./components/Navbar';import initializeDeck from'./desk';export default function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),flipped=_useState4[0],setFlipped=_useState4[1];var _useState5=useState(400),_useState6=_slicedToArray(_useState5,2),dimension=_useState6[0],setDimension=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),solved=_useState8[0],setSolved=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),disabled=_useState10[0],setDisabled=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),score=_useState12[0],setScore=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),wins=_useState14[0],setWins=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),wrongGuesses=_useState16[0],setWrongGuesses=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),losses=_useState18[0],setLosses=_useState18[1];useEffect(function(){resizeBoard();setCards(initializeDeck());preloadImages();},[]);useEffect(function(){var resizeListener=window.addEventListener('resize',resizeBoard);return function(){return window.removeEventListener('resize',resizeListener);};});useEffect(function(){checkScore();},[score]);// Only re-run the effect if count changes\nvar handleClick=function handleClick(id){setDisabled(true);if(flipped.length===0){setFlipped([id]);setDisabled(false);}else{if(sameCardClicked(id))return;setFlipped([flipped[0],id]);if(isMatch(id)){setSolved([].concat(_toConsumableArray(solved),[flipped[0],id]));resetCards();updateScore(score,checkScore);}else{noMatch();}}};var noMatch=function noMatch(){updateGuesses(wrongGuesses,checkGuesses);setTimeout(resetCards,1000);};function updateScore(score,callback){var newScore=score+1;setScore(score+1);callback(newScore);}function updateGuesses(wrongGuesses,callback){var newGuesses=wrongGuesses+1;setWrongGuesses(wrongGuesses+1);callback(newGuesses);}var checkScore=function checkScore(score){if(score>8){setWins(wins+1);setTimeout(newGame,1500);}};var checkGuesses=function checkGuesses(wrongGuesses){if(wrongGuesses>13){setLosses(losses+1);setTimeout(newGame,1500);}};var newGame=function newGame(){setSolved([]);setCards(initializeDeck());setWrongGuesses(0);setScore(0);};var preloadImages=function preloadImages(){console.log(cards.length);cards.map(function(card){var src=\"/images/\".concat(card.type,\".png\");new Image().src=src;});};var resetCards=function resetCards(){setFlipped([]);setDisabled(false);};var sameCardClicked=function sameCardClicked(id){return flipped.includes(id);};var isMatch=function isMatch(id){var clickedCard=cards.find(function(card){return card.id===id;});var flippedCard=cards.find(function(card){return flipped[0]===card.id;});return flippedCard.type===clickedCard.type;};var resizeBoard=function resizeBoard(){setDimension(Math.min(document.documentElement.clientWidth,document.documentElement.clientHeight));};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",style:{textAlign:\"center\"},children:[/*#__PURE__*/_jsx(Navbar,{wins:wins,losses:losses,score:score,wrongGuesses:wrongGuesses,newGame:newGame}),/*#__PURE__*/_jsx(Board,{dimension:dimension,cards:cards,flipped:flipped,handleClick:handleClick,disabled:disabled,solved:solved})]});}","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/App.js"],"names":["React","useState","useEffect","Board","Navbar","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","score","setScore","wins","setWins","wrongGuesses","setWrongGuesses","losses","setLosses","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","checkScore","handleClick","id","length","sameCardClicked","isMatch","resetCards","updateScore","noMatch","updateGuesses","checkGuesses","setTimeout","callback","newScore","newGuesses","newGame","console","log","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Board from './components/Board';\r\nimport Navbar from './components/Navbar';\r\n\r\nimport initializeDeck from './desk'\r\n\r\nexport default function App() {\r\n  const [cards, setCards] = useState([])\r\n  const [flipped, setFlipped] = useState([])\r\n  const [dimension, setDimension] = useState(400);\r\n  const [solved, setSolved] = useState([]);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [wins, setWins] = useState(0);\r\n  const [wrongGuesses, setWrongGuesses] = useState(0);\r\n  const [losses, setLosses] = useState(0);\r\n\r\n  useEffect(() => {\r\n    resizeBoard()\r\n    setCards(initializeDeck())\r\n    preloadImages()\r\n  }, [])\r\n\r\n  \r\n  useEffect(() => {\r\n    const resizeListener = window.addEventListener('resize', resizeBoard)\r\n    return () => window.removeEventListener('resize', resizeListener)\r\n  })\r\n\r\n  useEffect(() => {\r\n    checkScore();\r\n  }, [score]); // Only re-run the effect if count changes\r\n\r\n  const handleClick = (id) => {\r\n    setDisabled(true);\r\n    if (flipped.length === 0) {\r\n      setFlipped([id])\r\n      setDisabled(false)\r\n    }\r\n    else {\r\n      if (sameCardClicked(id)) return\r\n      setFlipped([flipped[0],id])\r\n      if (isMatch(id)) {\r\n        setSolved([...solved, flipped[0], id]);\r\n        resetCards();\r\n        updateScore(score, checkScore);\r\n      } else {\r\n        noMatch();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noMatch = () => {\r\n    updateGuesses(wrongGuesses, checkGuesses);\r\n    setTimeout(resetCards, 1000);\r\n  }\r\n\r\n  function updateScore(score, callback) {\r\n    var newScore = score + 1;\r\n    setScore(score + 1);\r\n    callback(newScore);\r\n  }\r\n\r\n  function updateGuesses(wrongGuesses, callback) {\r\n    var newGuesses = wrongGuesses + 1;\r\n    setWrongGuesses(wrongGuesses + 1);\r\n    callback(newGuesses);\r\n  }\r\n\r\n  const checkScore = (score) => {\r\n    if (score>8) {\r\n      setWins(wins + 1);\r\n      setTimeout(newGame, 1500);\r\n    }\r\n  }\r\n\r\n  const checkGuesses = (wrongGuesses) => {\r\n    if (wrongGuesses>13) {\r\n      setLosses(losses + 1);\r\n      setTimeout(newGame, 1500);\r\n    }\r\n  }\r\n\r\n  const newGame = () => {\r\n    setSolved([]);\r\n    setCards(initializeDeck());\r\n    setWrongGuesses(0);\r\n    setScore(0);\r\n  }\r\n\r\n  const preloadImages = () => {\r\n    console.log(cards.length)\r\n    cards.map(card => {\r\n      const src = `/images/${card.type}.png`\r\n      new Image().src = src\r\n    })\r\n  }\r\n\r\n  const resetCards = () => {\r\n    setFlipped([]);\r\n    setDisabled(false);\r\n  }\r\n\r\n  const sameCardClicked = (id) => flipped.includes(id);\r\n\r\n  const isMatch = (id) => {\r\n    const clickedCard = cards.find((card)=> card.id ===id);\r\n    const flippedCard = cards.find((card) => flipped[0]===card.id);\r\n    return flippedCard.type ===clickedCard.type;\r\n  }\r\n\r\n  const resizeBoard = () => {\r\n    setDimension(Math.min(\r\n      document.documentElement.clientWidth,\r\n      document.documentElement.clientHeight\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"app\"\r\n      style={{\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <Navbar \r\n        wins={wins}\r\n        losses={losses}\r\n        score={score}\r\n        wrongGuesses={wrongGuesses}\r\n        newGame={newGame}\r\n      />\r\n      <Board \r\n        dimension={dimension}\r\n        cards={cards}\r\n        flipped={flipped}\r\n        handleClick={handleClick}\r\n        disabled={disabled}\r\n        solved={solved}\r\n      />\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}