{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Board from'./components/Board';import initializeDesk from'./desk';export default function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),flipped=_useState4[0],setFlipped=_useState4[1];var _useState5=useState(400),_useState6=_slicedToArray(_useState5,2),dimension=_useState6[0],setDimension=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),solved=_useState8[0],setSolved=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),disabled=_useState10[0],setDisabled=_useState10[1];useEffect(function(){resizeBoard();setCards(initializeDesk());},[]);useEffect(function(){preloadImages();},cards);useEffect(function(){var resizeListener=window.addEventListener('resize',resizeBoard);return function(){return window.removeEventListener('resize',resizeListener);};});var handleClick=function handleClick(id){setDisabled(true);if(flipped.length===0){setFlipped([id]);setDisabled(false);}else{if(sameCardClicked(id))return;setFlipped([flipped[0],id]);if(isMatch(id)){setSolved([].concat(_toConsumableArray(solved),[flipped[0],id]));resetCards();}else{setTimeout(resetCards,2000);}}};var sameCardClicked=function sameCardClicked(id){return flipped.includes(id);};var isMatch=function isMatch(id){var clickedCard=cards.find(function(card){return card.id===id;});var flippedCard=cards.find(function(card){return flipped[0]===card.id;});return flippedCard===clickedCard;};var preloadImages=function preloadImages(){cards.map(function(card){var src=\"/image/\".concat(card.type,\".png\");console.log(src);new Image().spc=src;});};var resetCards=function resetCards(){setFlipped([]);setDisabled(false);};var resizeBoard=function resizeBoard(){setDimension(Math.min(document.documentElement.clientWidth,document.documentElement.clientHeight));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Can you remember where the cards are?\"}),/*#__PURE__*/_jsx(Board,{dimension:dimension,cards:cards,flipped:flipped,handleClick:handleClick,disabled:disabled,solved:solved})]});}","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/App.js"],"names":["React","useState","useEffect","Board","initializeDesk","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","includes","clickedCard","find","card","flippedCard","map","src","type","console","log","Image","spc","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport Board from './components/Board';\r\nimport initializeDesk from './desk';\r\n\r\n\r\n\r\nexport default function App() {\r\n    const [cards, setCards] = useState([])\r\n    const [flipped, setFlipped] = useState([])\r\n    const [dimension, setDimension]=useState(400)\r\n    const [solved, setSolved] = useState([])\r\n    const [disabled, setDisabled] = useState(false)\r\n\r\n\r\n    useEffect(()=>{\r\n        resizeBoard()\r\n        setCards(initializeDesk())        \r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n        preloadImages()\r\n    }, cards)\r\n\r\n    useEffect(()=>{\r\n        const resizeListener = window.addEventListener('resize', resizeBoard)\r\n        return () => window.removeEventListener('resize', resizeListener)\r\n    })\r\n\r\n\r\n    const handleClick =(id) =>{\r\n        setDisabled(true) \r\n        if(flipped.length===0){\r\n            setFlipped([id])\r\n            setDisabled(false)\r\n                   \r\n        } else {\r\n            if (sameCardClicked (id)) return\r\n            setFlipped([flipped[0], id])\r\n            if (isMatch(id)){\r\n                setSolved([...solved, flipped[0], id])\r\n                resetCards()\r\n            } else {\r\n                setTimeout(resetCards, 2000)\r\n            }\r\n        }\r\n    }\r\n        \r\n   \r\n\r\n    const sameCardClicked =(id) => flipped.includes(id)\r\n\r\n    const isMatch = (id) =>{\r\n        const clickedCard = cards.find((card) => card.id === id)\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n        return flippedCard === clickedCard\r\n    }\r\n\r\n    const preloadImages = () => {\r\n        \r\n        cards.map( card =>{\r\n            const src = `/image/${card.type}.png`\r\n            console.log(src)\r\n            new Image().spc = src\r\n\r\n        } )\r\n    }\r\n\r\n    const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled (false)\r\n    }\r\n\r\n    const resizeBoard = () => {\r\n        setDimension(\r\n            Math.min(\r\n                document.documentElement.clientWidth,\r\n                document.documentElement.clientHeight,\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Can you remember where the cards are?</h2>\r\n            <Board \r\n            dimension={dimension}\r\n            cards={cards} \r\n            flipped={flipped}\r\n            handleClick={handleClick}\r\n            disabled={disabled}\r\n            solved={solved}/> \r\n                    \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}