{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Aleksandra Miteva\\\\Desktop\\\\ovning-memory-game-galinamiteva\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/Board';\nimport Navbar from './components/Navbar';\nimport initializeDeck from './desk';\nexport default function App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [score, setScore] = useState(0);\n  const [wins, setWins] = useState(0);\n  const [wrongGuesses, setWrongGuesses] = useState(0);\n  const [losses, setLosses] = useState(0);\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n    preloadImages();\n  }, []);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n  useEffect(() => {\n    checkScore();\n  }, [score]); // Only re-run the effect if count changes\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n        updateScore(score, checkScore);\n      } else {\n        noMatch();\n      }\n    }\n  };\n\n  const noMatch = () => {\n    updateGuesses(wrongGuesses, checkGuesses);\n    setTimeout(resetCards, 1000);\n  };\n\n  function updateScore(score, callback) {\n    var newScore = score + 1;\n    setScore(score + 1);\n    callback(newScore);\n  }\n\n  function updateGuesses(wrongGuesses, callback) {\n    var newGuesses = wrongGuesses + 1;\n    setWrongGuesses(wrongGuesses + 1);\n    callback(newGuesses);\n  }\n\n  const checkScore = score => {\n    if (score > 7) {\n      setWins(wins + 1);\n      setTimeout(newGame, 2000);\n    }\n  };\n\n  const checkGuesses = wrongGuesses => {\n    if (wrongGuesses > 13) {\n      setLosses(losses + 1);\n      setTimeout(newGame, 2000);\n    }\n  };\n\n  const newGame = () => {\n    setSolved([]);\n    setCards(initializeDeck());\n    setWrongGuesses(0);\n    setScore(0);\n  };\n\n  const preloadImages = () => {\n    console.log(cards.length);\n    cards.map(card => {\n      const src = `/images/${card.type}.png`;\n      new Image().src = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      wins: wins,\n      losses: losses,\n      score: score,\n      wrongGuesses: wrongGuesses,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      dimension: dimension,\n      cards: cards,\n      flipped: flipped,\n      handleClick: handleClick,\n      disabled: disabled,\n      solved: solved\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"571ODyzOFRaxdpjfnRcjdswyB6k=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/App.js"],"names":["React","useState","useEffect","Board","Navbar","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","score","setScore","wins","setWins","wrongGuesses","setWrongGuesses","losses","setLosses","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","checkScore","handleClick","id","length","sameCardClicked","isMatch","resetCards","updateScore","noMatch","updateGuesses","checkGuesses","setTimeout","callback","newScore","newGuesses","newGame","console","log","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Board from './components/Board';\r\nimport Navbar from './components/Navbar';\r\n\r\nimport initializeDeck from './desk'\r\n\r\nexport default function App() {\r\n  const [cards, setCards] = useState([])\r\n  const [flipped, setFlipped] = useState([])\r\n  const [dimension, setDimension] = useState(400);\r\n  const [solved, setSolved] = useState([]);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [wins, setWins] = useState(0);\r\n  const [wrongGuesses, setWrongGuesses] = useState(0);\r\n  const [losses, setLosses] = useState(0);\r\n\r\n  useEffect(() => {\r\n    resizeBoard()\r\n    setCards(initializeDeck())\r\n    preloadImages()\r\n  }, [])\r\n\r\n  \r\n  useEffect(() => {\r\n    const resizeListener = window.addEventListener('resize', resizeBoard)\r\n    return () => window.removeEventListener('resize', resizeListener)\r\n  })\r\n\r\n  useEffect(() => {\r\n    checkScore();\r\n  }, [score]); // Only re-run the effect if count changes\r\n\r\n  const handleClick = (id) => {\r\n    setDisabled(true);\r\n    if (flipped.length === 0) {\r\n      setFlipped([id])\r\n      setDisabled(false)\r\n    }\r\n    else {\r\n      if (sameCardClicked(id)) return\r\n      setFlipped([flipped[0],id])\r\n      if (isMatch(id)) {\r\n        setSolved([...solved, flipped[0], id]);\r\n        resetCards();\r\n        updateScore(score, checkScore);\r\n      } else {\r\n        noMatch();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noMatch = () => {\r\n    updateGuesses(wrongGuesses, checkGuesses);\r\n    setTimeout(resetCards, 1000);\r\n  }\r\n\r\n  function updateScore(score, callback) {\r\n    var newScore = score + 1;\r\n    setScore(score + 1);\r\n    callback(newScore);\r\n  }\r\n\r\n  function updateGuesses(wrongGuesses, callback) {\r\n    var newGuesses = wrongGuesses + 1;\r\n    setWrongGuesses(wrongGuesses + 1);\r\n    callback(newGuesses);\r\n  }\r\n\r\n  const checkScore = (score) => {\r\n    if (score>7) {\r\n      setWins(wins + 1);\r\n      setTimeout(newGame, 2000);\r\n    }\r\n  }\r\n\r\n  const checkGuesses = (wrongGuesses) => {\r\n    if (wrongGuesses>13) {\r\n      setLosses(losses + 1);\r\n      setTimeout(newGame, 2000);\r\n    }\r\n  }\r\n\r\n  const newGame = () => {\r\n    setSolved([]);\r\n    setCards(initializeDeck());\r\n    setWrongGuesses(0);\r\n    setScore(0);\r\n  }\r\n\r\n  const preloadImages = () => {\r\n    console.log(cards.length)\r\n    cards.map(card => {\r\n      const src = `/images/${card.type}.png`\r\n      new Image().src = src\r\n    })\r\n  }\r\n\r\n  const resetCards = () => {\r\n    setFlipped([]);\r\n    setDisabled(false);\r\n  }\r\n\r\n  const sameCardClicked = (id) => flipped.includes(id);\r\n\r\n  const isMatch = (id) => {\r\n    const clickedCard = cards.find((card)=> card.id ===id);\r\n    const flippedCard = cards.find((card) => flipped[0]===card.id);\r\n    return flippedCard.type ===clickedCard.type;\r\n  }\r\n\r\n  const resizeBoard = () => {\r\n    setDimension(Math.min(\r\n      document.documentElement.clientWidth,\r\n      document.documentElement.clientHeight\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"app\"\r\n      style={{\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <Navbar \r\n        wins={wins}\r\n        losses={losses}\r\n        score={score}\r\n        wrongGuesses={wrongGuesses}\r\n        newGame={newGame}\r\n      />\r\n      <Board \r\n        dimension={dimension}\r\n        cards={cards}\r\n        flipped={flipped}\r\n        handleClick={handleClick}\r\n        disabled={disabled}\r\n        solved={solved}\r\n      />\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}