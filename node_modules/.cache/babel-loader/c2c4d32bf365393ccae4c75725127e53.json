{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Board from'./components/Board';import Navbar from'./components/Navbar';import initializeDesk from'./desk';export default function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cards=_useState2[0],setCards=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),flipped=_useState4[0],setFlipped=_useState4[1];var _useState5=useState(400),_useState6=_slicedToArray(_useState5,2),dimension=_useState6[0],setDimension=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),solved=_useState8[0],setSolved=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),disabled=_useState10[0],setDisabled=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),score=_useState12[0],setScore=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),wins=_useState14[0],setWins=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),wrongGuesses=_useState16[0],setWrongGuesses=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),losses=_useState18[0],setLosses=_useState18[1];useEffect(function(){resizeBoard();setCards(initializeDesk());},[]);useEffect(function(){preloadImages();},cards);useEffect(function(){var resizeListener=window.addEventListener('resize',resizeBoard);return function(){return window.removeEventListener('resize',resizeListener);};});useEffect(function(){checkScore();},[score]);var handleClick=function handleClick(id){setDisabled(true);if(flipped.length===0){setFlipped([id]);setDisabled(false);}else{if(sameCardClicked(id))return'click another square';setFlipped([flipped[0],id]);if(isMatch(id)){setSolved([].concat(_toConsumableArray(solved),[flipped[0],id]));resetCards();updateScore(score,checkScore);}else{noMatch();}}};var noMatch=function noMatch(){updateGuesses(wrongGuesses,checkGuesses);setTimeout(resetCards,1500);};function updateScore(score,callback){var newScore=score+1;setScore(score+1);callback(newScore);}function updateGuesses(wrongGuesses,callback){var newGuesses=wrongGuesses+1;setWrongGuesses(wrongGuesses+1);callback(newGuesses);}var checkScore=function checkScore(score){if(score>7){setWins(wins+1);setTimeout(newGame,1500);}};var checkGuesses=function checkGuesses(wrongGuesses){if(wrongGuesses>7){setLosses(losses+1);setTimeout(newGame,2000);}};var newGame=function newGame(){setSolved([]);setCards(initializeDesk());setWrongGuesses(0);setScore(0);};var preloadImages=function preloadImages(){cards.map(function(card){var src=\"/image/\".concat(card.type,\".png\");new Image().spc=src;});};var resetCards=function resetCards(){setFlipped([]);setDisabled(false);};var sameCardClicked=function sameCardClicked(id){return flipped.includes(id);};var isMatch=function isMatch(id){var clickedCard=cards.find(function(card){return card.id===id;});var flippedCard=cards.find(function(card){return flipped[0]===card.id;});return flippedCard.type===clickedCard.type;};var resizeBoard=function resizeBoard(){setDimension(Math.min(document.documentElement.clientWidth,document.documentElement.clientHeight));};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(Navbar,{wins:wins,losses:losses,score:score,wrongGuesses:wrongGuesses,newGame:newGame}),/*#__PURE__*/_jsx(Board,{dimension:dimension,cards:cards,flipped:flipped,handleClick:handleClick,disabled:disabled,solved:solved})]});}","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/App.js"],"names":["React","useState","useEffect","Board","Navbar","initializeDesk","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","score","setScore","wins","setWins","wrongGuesses","setWrongGuesses","losses","setLosses","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","checkScore","handleClick","id","length","sameCardClicked","isMatch","resetCards","updateScore","noMatch","updateGuesses","checkGuesses","setTimeout","callback","newScore","newGuesses","newGame","map","card","src","type","Image","spc","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","textAlign"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport Board from './components/Board';\r\nimport Navbar from './components/Navbar'\r\nimport initializeDesk from './desk';\r\n\r\n\r\n\r\nexport default function App() {\r\n    const [cards, setCards] = useState([]);\r\n    const [flipped, setFlipped] = useState([]);\r\n    const [dimension, setDimension]=useState(400);\r\n    const [solved, setSolved] = useState([]);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [wins, setWins] = useState(0);\r\n    const [wrongGuesses, setWrongGuesses] = useState(0);\r\n    const [losses, setLosses] = useState(0);\r\n\r\n\r\n    useEffect(()=>{\r\n        resizeBoard()\r\n        setCards(initializeDesk())        \r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n        preloadImages()\r\n    }, cards)\r\n\r\n    useEffect(()=>{\r\n        const resizeListener = window.addEventListener('resize', resizeBoard)\r\n        return () => window.removeEventListener('resize', resizeListener)\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        checkScore();\r\n    }, [score]); \r\n\r\n   \r\n\r\n    const handleClick = (id) => {\r\n        setDisabled(true); \r\n        if(flipped.length === 0) {\r\n            setFlipped([id]);\r\n            setDisabled(false);\r\n                   \r\n        } else {\r\n            if (sameCardClicked (id)) return 'click another square';\r\n            setFlipped([flipped[0], id])\r\n            if (isMatch(id)) {\r\n                setSolved([...solved, flipped[0], id])\r\n                resetCards()\r\n                updateScore(score, checkScore);\r\n            } else {\r\n                noMatch();\r\n            }\r\n        }\r\n    };\r\n        \r\n   const noMatch = () => {\r\n       updateGuesses(wrongGuesses, checkGuesses);\r\n       setTimeout(resetCards, 1500);\r\n   }\r\n\r\n   function updateScore(score, callback) {\r\n       var newScore = score +1;\r\n       setScore(score + 1);\r\n       callback(newScore);\r\n   }\r\n\r\n   function updateGuesses(wrongGuesses, callback){\r\n       var newGuesses = wrongGuesses + 1;\r\n       setWrongGuesses(wrongGuesses + 1);\r\n       callback(newGuesses);\r\n   }\r\n\r\n   const checkScore = (score) =>{\r\n       if (score > 7) {\r\n           setWins(wins + 1);\r\n           setTimeout(newGame, 1500);\r\n       }\r\n   }\r\n \r\n   const checkGuesses = (wrongGuesses) => {\r\n       if (wrongGuesses>7){\r\n           setLosses (losses + 1);\r\n           setTimeout (newGame, 2000);\r\n       }\r\n   }\r\n\r\n   const newGame = () => {\r\n       setSolved([]);\r\n       setCards(initializeDesk());\r\n       setWrongGuesses(0);\r\n       setScore(0);\r\n    }\r\n\r\n    const preloadImages = () => {\r\n        cards.map( card =>{\r\n            const src = `/image/${card.type}.png`\r\n            new Image().spc = src\r\n        } )\r\n    }\r\n\r\n    const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled (false)\r\n    }\r\n\r\n    const sameCardClicked =(id) => flipped.includes(id);\r\n\r\n    const isMatch = (id) => {\r\n        const clickedCard = cards.find((card) => card.id === id);\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id);\r\n        return flippedCard.type === clickedCard.type;\r\n    };\r\n   \r\n\r\n    const resizeBoard = () => {\r\n        setDimension(Math.min(\r\n                document.documentElement.clientWidth,\r\n                document.documentElement.clientHeight\r\n            )\r\n        )\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <div className='app'  style = {{textAlign: 'center'}}>\r\n\r\n            <Navbar\r\n                wins = {wins}\r\n                losses = {losses}\r\n                score = {score}\r\n                wrongGuesses = {wrongGuesses}\r\n                newGame={newGame}/>\r\n\r\n            <Board \r\n            dimension={dimension}\r\n            cards={cards} \r\n            flipped={flipped}\r\n            handleClick={handleClick}\r\n            disabled={disabled}\r\n            solved={solved}/> \r\n\r\n                    \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}