{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Aleksandra Miteva\\\\Desktop\\\\ovning-memory-game-galinamiteva\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/Board';\nimport initializeDesk from './desk';\nexport default function App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDesk());\n  }, []);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard === clickedCard;\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Can you remember where the cards are?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      dimension: dimension,\n      cards: cards,\n      flipped: flipped,\n      handleClick: handleClick,\n      disabled: disabled,\n      solved: solved\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"k+KRcxZ1fPkb2yqnjrwotYbfkQw=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Aleksandra Miteva/Desktop/ovning-memory-game-galinamiteva/src/App.js"],"names":["React","useState","useEffect","Board","initializeDesk","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","includes","clickedCard","find","card","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport Board from './components/Board';\r\nimport initializeDesk from './desk';\r\n\r\n\r\n\r\nexport default function App() {\r\n    const [cards, setCards] = useState([])\r\n    const [flipped, setFlipped] = useState([])\r\n    const [dimension, setDimension]=useState(400)\r\n    const [solved, setSolved] = useState([])\r\n    const [disabled, setDisabled] = useState(false)\r\n\r\n\r\n    useEffect(()=>{\r\n        resizeBoard()\r\n        setCards(initializeDesk())\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const resizeListener = window.addEventListener('resize', resizeBoard)\r\n        return () => window.removeEventListener('resize', resizeListener)\r\n    })\r\n\r\n\r\n    const handleClick =(id) =>{\r\n        setDisabled(true) \r\n        if(flipped.length===0){\r\n            setFlipped([id])\r\n            setDisabled(false)\r\n                   \r\n        } else {\r\n            if (sameCardClicked (id)) return\r\n            setFlipped([flipped[0], id])\r\n            if (isMatch(id)){\r\n                setSolved([...solved, flipped[0], id])\r\n                resetCards()\r\n            } else {\r\n                setTimeout(resetCards, 2000)\r\n            }\r\n        }\r\n    }\r\n        \r\n   \r\n\r\n    const sameCardClicked =(id) => flipped.includes(id)\r\n\r\n    const isMatch = (id) =>{\r\n        const clickedCard = cards.find((card) => card.id === id)\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n        return flippedCard === clickedCard\r\n    }\r\n\r\n    const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled (false)\r\n    }\r\n\r\n    const resizeBoard = () => {\r\n        setDimension(\r\n            Math.min(\r\n                document.documentElement.clientWidth,\r\n                document.documentElement.clientHeight,\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Can you remember where the cards are?</h2>\r\n            <Board \r\n            dimension={dimension}\r\n            cards={cards} \r\n            flipped={flipped}\r\n            handleClick={handleClick}\r\n            disabled={disabled}\r\n            solved={solved}/> \r\n                    \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}