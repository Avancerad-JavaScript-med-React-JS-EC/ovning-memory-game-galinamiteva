{"version":3,"sources":["components/Card/index.js","components/Board/index.js","components/Navbar/index.js","desk.js","App.js","index.js"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","src","alt","Board","dimension","cards","map","card","includes","Navbar","props","newGame","wins","losses","score","wrongGuesses","initializeDesk","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","console","log","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","setScore","setWins","setWrongGuesses","setLosses","useEffect","resizeBoard","initializeDeck","preloadImages","resizeListener","window","addEventListener","removeEventListener","checkScore","noMatch","callback","newGuesses","updateGuesses","checkGuesses","setTimeout","resetCards","Image","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","textAlign","newScore","updateScore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6d381df8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Card({ \r\n    handleClick, \r\n    id, \r\n    type, \r\n    flipped, \r\n    solved,\r\n    height, \r\n    width, \r\n    disabled\r\n}) {\r\n    return <div\r\n        className={`flip-container ${flipped ? 'flipped' : ''}`}\r\n        style={{\r\n            width, height\r\n        }}\r\n        onClick={()=> disabled ? null : handleClick(id)}\r\n        >\r\n        <div className=\"flipper\">\r\n            <img\r\n                style={{\r\n                    height, width\r\n                }}\r\n                className={flipped ? 'front' : 'back'}\r\n                src={flipped || solved ? `/image/${type}.png` : 'image/back.png' }\r\n                alt={type}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nCard.propTypes = {\r\n    handleClick: PropTypes.func.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    flipped: PropTypes.bool.isRequired,\r\n    solved: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired, \r\n    disabled: PropTypes.bool.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '../Card';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Board({ disabled, dimension, cards, flipped, solved, handleClick }) {\r\n    return (\r\n        <div className=\"board\"\r\n              style={{\r\n                  width: dimension,\r\n                  height: dimension\r\n              }}>\r\n            {cards.map((card) => (\r\n                <Card \r\n                    key={card.id}    \r\n                    id={card.id}\r\n                    type={card.type}\r\n                    width={dimension/4.5}\r\n                    height={dimension/4.5}\r\n                    flipped={flipped.includes(card.id)}\r\n                    solved={solved.includes(card.id)}\r\n                    handleClick={handleClick}\r\n                    disabled={disabled || solved.includes(card.id)}\r\n                    {...card}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nBoard.propTypes = {\r\n    disabled: PropTypes.bool.isRequired,\r\n    dimension: PropTypes.number.isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Navbar = props => (  //props ar : wins, losses, score, wrongGuesses, newGame\r\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <div>\r\n      <ul className=\"navbar-nav\">\r\n      <li className=\"instruction\">\r\n          <div>MEMORY GAME</div>\r\n  \r\n            <div className=\"instruction\">Can you remember where the cards are?</div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <div className=\"restart\" onClick={() => props.newGame()}>\r\n            Restart Game\r\n          </div>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n         \r\n              <div className=\"wins\">Wins: {props.wins} </div>         \r\n              <div className=\"losses\">Losses: {props.losses} </div>\r\n          \r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <div className=\"score\">Current Score: {props.score}/8</div>\r\n\r\n            <div className=\"wrongGuesses\">Incorrect Guesses: {props.wrongGuesses}/8</div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;","\r\nfunction shuffle(array){\r\n    const _array=array.slice(0);\r\n\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        let randomIndex = Math.floor(Math.random() * (i + 1));\r\n        let temp = _array[i];\r\n        _array[i] = _array[randomIndex];\r\n        _array[randomIndex] = temp;\r\n    }\r\n    console.log(_array);\r\n    \r\n    return _array; \r\n}\r\n\r\n\r\nexport default function initializeDesk(){\r\n    let id = 0;\r\n    const cards = ['astronaut', 'clown', 'cook','diver', 'doctor', 'fairy', 'musician', 'police'\r\n    ].reduce((acc, type) => {\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        return acc\r\n    }, [])\r\n\r\n    return shuffle(cards)\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Board from './components/Board';\r\nimport Navbar from './components/Navbar';\r\n\r\nimport initializeDeck from './desk'\r\n\r\nexport default function App() {\r\n  const [cards, setCards] = useState([])\r\n  const [flipped, setFlipped] = useState([])\r\n  const [dimension, setDimension] = useState(400);\r\n  const [solved, setSolved] = useState([]);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [wins, setWins] = useState(0);\r\n  const [wrongGuesses, setWrongGuesses] = useState(0);\r\n  const [losses, setLosses] = useState(0);\r\n\r\n  useEffect(() => {\r\n    resizeBoard()\r\n    setCards(initializeDeck())\r\n    preloadImages()\r\n  }, [])\r\n\r\n  \r\n  useEffect(() => {\r\n    const resizeListener = window.addEventListener('resize', resizeBoard)\r\n    return () => window.removeEventListener('resize', resizeListener)\r\n  })\r\n\r\n  useEffect(() => {\r\n    checkScore();\r\n  }, [score]); // Only re-run the effect if count changes\r\n\r\n  const handleClick = (id) => {\r\n    setDisabled(true);\r\n    if (flipped.length === 0) {\r\n      setFlipped([id])\r\n      setDisabled(false)\r\n    }\r\n    else {\r\n      if (sameCardClicked(id)) return\r\n      setFlipped([flipped[0],id])\r\n      if (isMatch(id)) {\r\n        setSolved([...solved, flipped[0], id]);\r\n        resetCards();\r\n        updateScore(score, checkScore);\r\n      } else {\r\n        noMatch();\r\n      }\r\n    }\r\n  }\r\n\r\n  const noMatch = () => {\r\n    updateGuesses(wrongGuesses, checkGuesses);\r\n    setTimeout(resetCards, 1000);\r\n  }\r\n\r\n  function updateScore(score, callback) {\r\n    var newScore = score + 1;\r\n    setScore(score + 1);\r\n    callback(newScore);\r\n  }\r\n\r\n  function updateGuesses(wrongGuesses, callback) {\r\n    var newGuesses = wrongGuesses + 1;\r\n    setWrongGuesses(wrongGuesses + 1);\r\n    callback(newGuesses);\r\n  }\r\n\r\n  const checkScore = (score) => {\r\n    if (score>8) {\r\n      setWins(wins + 1);\r\n      setTimeout(newGame, 1500);\r\n    }\r\n  }\r\n\r\n  const checkGuesses = (wrongGuesses) => {\r\n    if (wrongGuesses>13) {\r\n      setLosses(losses + 1);\r\n      setTimeout(newGame, 1500);\r\n    }\r\n  }\r\n\r\n  const newGame = () => {\r\n    setSolved([]);\r\n    setCards(initializeDeck());\r\n    setWrongGuesses(0);\r\n    setScore(0);\r\n  }\r\n\r\n  const preloadImages = () => {\r\n    console.log(cards.length)\r\n    cards.map(card => {\r\n      const src = `/images/${card.type}.png`\r\n      new Image().src = src\r\n    })\r\n  }\r\n\r\n  const resetCards = () => {\r\n    setFlipped([]);\r\n    setDisabled(false);\r\n  }\r\n\r\n  const sameCardClicked = (id) => flipped.includes(id);\r\n\r\n  const isMatch = (id) => {\r\n    const clickedCard = cards.find((card)=> card.id ===id);\r\n    const flippedCard = cards.find((card) => flipped[0]===card.id);\r\n    return flippedCard.type ===clickedCard.type;\r\n  }\r\n\r\n  const resizeBoard = () => {\r\n    setDimension(Math.min(\r\n      document.documentElement.clientWidth,\r\n      document.documentElement.clientHeight\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"app\"\r\n      style={{\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <Navbar \r\n        wins={wins}\r\n        losses={losses}\r\n        score={score}\r\n        wrongGuesses={wrongGuesses}\r\n        newGame={newGame}\r\n      />\r\n      <Board \r\n        dimension={dimension}\r\n        cards={cards}\r\n        flipped={flipped}\r\n        handleClick={handleClick}\r\n        disabled={disabled}\r\n        solved={solved}\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}